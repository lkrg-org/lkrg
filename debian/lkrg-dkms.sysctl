#
# /etc/sysctl.d/30-lkrg-dkms.conf
#

#  Quick choice of a pre-defined profile controlling whether, when, and to what
#  extent LKRG validates system integrity and detects attacks.  Allowed values
#  are 0 (disabled), 1 (light), 2 (balanced), 3 (heavy), and 4 (paranoid).
#  Additionally, this setting will read as 9 (custom) if an underlying setting
#  is changed directly (potentially deviating from any of the profiles).
#
#  Higher-numbered validation profiles provide higher likelihood of timely
#  detection of an attack, but involve higher performance overhead and higher
#  risk of incompatibility with other system software.  Profiles 1 to 3 provide
#  reasonable tradeoffs.
#
#  lkrg.profile_validate=3 or higher is incompatible with VirtualBox hosts,
#  where you need to use at most lkrg.profile_validate=2.  However, there's no
#  problem with setting lkrg.profile_validate=3 on Linux+LKRG guest systems in
#  VirtualBox VMs.
#
#  lkrg.profile_validate=4 (paranoid) is incompatible with many distributions
#  and has unreasonably high performance overhead and poor scalability while not
#  necessarily providing a practically relevant improvement in attack detection.
#
#  Choosing a validation profile sets the following underlying settings, which
#  are described further below: kint_validate, pint_validate, pcfi_validate,
#  umh_validate, smep_validate, smap_validate, and msr_validate.
#
#  Default: "3"
#lkrg.profile_validate = 3

#  Quick choice of a pre-defined profile controlling whether and how LKRG acts
#  on detected integrity violations and attacks.  Allowed values are 0 (log and
#  accept), 1 (selective), 2 (strict), and 3 (paranoid).  Additionally, this
#  setting will read as 9 (custom) if an underlying setting is changed directly
#  (potentially deviating from any of the profiles).
#
#  Higher-numbered enforcement profiles provide higher likelihood of mitigating
#  a compromise or stopping an attack, but also a higher risk of interfering
#  with normal system behavior and to a worse extent in case of false positives.
#
#  lkrg.profile_enforce=0 can be used for safe testing of LKRG, where any
#  detected violations and attacks are logged but no enforcement is performed.
#  It can also be useful where LKRG is meant to act as a sensor within a larger
#  security monitoring and response setup (e.g., network-wide).
#
#  lkrg.profile_enforce=1 performs selective enforcement - log only for kernel
#  integrity violations, varying effective actions ranging from killing a task
#  to triggering a kernel panic for other types of violations and attacks.
#  This mode is extremely unlikely to panic the kernel on a false positive.
#
#  lkrg.profile_enforce=2 performs strict enforcement - varying effective
#  actions for all types of violations and attacks, including triggering a
#  kernel panic for kernel integrity violations.
#
#  lkrg.profile_enforce=3 performs the most paranoid enforcement - kernel panic
#  for all types of violations and attacks.
#
#  Choosing an enforcement profile sets the following underlying settings, which
#  are described further below: kint_enforce, pint_enforce, pcfi_enforce,
#  umh_enforce, smep_enforce, and smap_enforce.
#
#  Also relevant is the kernel's kernel.panic sysctl and panic parameter, which
#  makes the system reboot on kernel panic.  For example, kernel.panic=60 in
#  /etc/sysctl.conf or in a file under the /etc/sysctl.d directory, or panic=60
#  on the kernel's command-line, will make the system reboot in 60 seconds after
#  a panic.  This provides a brief opportunity read the panic message on the
#  console yet makes an unattended server try to come back up on its own.
#
#  Profiles are currently available via sysctl only - there are no corresponding
#  module parameters.  However, the individual underlying settings, which are
#  described further below, do have their corresponding module parameters.
#
#  Default: "2"
#lkrg.profile_enforce = 2

#  Whether or not to print a heartbeat message ("System is clean!" or "Tasks are
#  clean!" depending on other configuration) whenever the global integrity
#  checking routine completes with no violations detected.  Allowed values are 0
#  (don't print the message) and 1 (print the message if allowed by log_level).
#
#  Default: "0"
#lkrg.heartbeat = 0

#  LKRG's timer interval for periodic invocation of the global integrity
#  checking routine, in seconds.  Allowed values are 5 to 1800.
#
#  Default: "15"
#lkrg.interval = 15

#  Force LKRG to invoke the global integrity checking routine.  If you set this
#  to 1, the routine is immediately invoked and this sysctl is reset back to 0.
#
#  Default: ""
#lkrg.trigger = 0

#  LKRG's logging verbosity level.  Allowed values are from 0 to 4 for normal
#  builds or from 0 to 6 for debugging builds.
#
#  Values of 4 and higher are meant for debugging only and produce too verbose
#  logging for production use.  Moreover, some messages logged at those high
#  levels contain information useful for kernel vulnerability exploitation,
#  making those log levels potentially mildly insecure (depending on other
#  system configuration).
#
#  Default: "3"
#lkrg.log_level = 3

#  Whether or not to block further loading of kernel modules.  Allowed values
#  are 0 (no) and 1 (yes).
#
#  This feature is meant primarily to prevent unintended user-triggered (or
#  attacker-triggered) auto-loading of maybe-vulnerable modules provided in a
#  distribution after all intended modules have already been loaded.  This
#  feature is not effective (nor is meant to be) against attackers who already
#  have root privileges and try to load a module explicitly (they could simply
#  flip this setting or even unload LKRG first).
#
#  Please note that enabling this setting (too) early (e.g., using the module
#  parameter or /etc/sysctl.*) may cause the system to fail to complete bootup
#  (if required modules are still being loaded in later stages of bootup, which
#  varies between distributions and system configurations).
#
#  Also relevant is the kernel's kernel.modules_disabled sysctl, which fully
#  disables module loading until the system is rebooted.
#
#  Default: "0"
#lkrg.block_modules = 0

#  Whether or not LKRG should hide itself from the lists of loaded modules and
#  KOBJs.  Allowed values are 0 (do not hide LKRG, or unhide it if previously
#  hidden) and 1 (hide LKRG).
#
#  Please note that LKRG can be easily detected by other means anyway, such as
#  through the presence of its sysctl's.
#
#  Default: "0"
#lkrg.hide = 0

#  Whether and when to validate global kernel integrity.  Allowed values are 0
#  (disabled), 1 (only when manually triggered by lkrg.trigger), 2 (also
#  periodically every lkrg.interval seconds), and 3 (also periodically every
#  lkrg.interval seconds and probabilistically on certain other events).
#
#  This currently applies to kernel and modules code and read-only data, global
#  SELinux settings, and some CPU status registers/bits (WP, SMEP, SMAP, MSRs).
#  (The validation and enforcement of SMEP, SMAP, and MSRs are separately
#  controlled by their respective knobs described below, and SMEP and SMAP are
#  validated much more frequently, not only as part of global kernel integrity.)
#
#  Default: "3"
#lkrg.kint_validate = 3

#  How to act on global kernel integrity violations.  Allowed values are 0 (log
#  once and accept new likely-compromised state as valid), 1 (log only for most
#  violations, log the violation and restore previous state for SELinux and CPU
#  WP bit), and 2 (panic the kernel).
#
#  Note that lkrg.kint_enforce=1 is expected to produce repeated log messages on
#  most kernel integrity violations, which can be noisy.  Also note that
#  lkrg.kint_enforce=2 is unfortunately the only way to make full use of LKRG's
#  global kernel integrity validation.  Running with lkrg.kint_validate=2 or
#  higher but lkrg.kint_enforce set to 0 or 1 wastes CPU time on costly checks
#  without achieving a corresponding security improvement, except that it might
#  provide logs for post-mortem detection and analysis of a security compromise.
#
#  Default: "2"
#lkrg.kint_enforce = 2

#  Whether and when to validate process credentials integrity.  Allowed values
#  are 0 (disabled), 1 (validate a task's credentials just before it'd make use
#  of the credentials), 2 (currently, it has the same meaning as 1), and 3
#  (validate credentials of all tasks in the system whenever any task is about
#  to make use of its credentials).
#
#  Except with lkrg.pint_validate=0, we also validate the credentials of all
#  tasks as part of LKRG's global integrity checking routine.
#
#  lkrg.pint_validate=1 is sufficient to provide most of LKRG's potential at
#  timely detection of exploits.  lkrg.pint_validate=3 is a paranoid mode with
#  high performance overhead yet likely a minuscule gain in security.
#
# Default: "2"
#lkrg.pint_validate = 2

#  How to act on process credentials integrity violations.  Allowed values are 0
#  (log once and accept new likely-compromised state as valid), 1 (kill the
#  task), and 2 (panic the kernel).
#
#  In Linux kernel's terminology, which we also use here, a "task" refers to a
#  thread, and threads of a program may technically have different credentials.
#  Our enforcement of process credentials integrity is thus per-thread, and e.g.
#  it might happen that we kill an individual compromised thread of a program.
#
#  Default: "1"
#lkrg.pint_enforce = 1

#  Whether and to what extent to validate Control Flow Integrity (CFI) on kernel
#  functions that we monitor because of their usefulness for exploits' Return
#  Oriented Programming (ROP) chains.  Allowed values are 0 (disabled), 1 (only
#  validate the stack pointer), and 2 (also validate all stack frames).
#
#  Because of the very limited extent of validation performed, we call our CFI
#  mechanism pCFI, for poor man's CFI.
#
#  lkrg.pcfi_validate=2 is incompatible with VirtualBox hosts, where you need to
#  use at most lkrg.pcfi_validate=1.  However, there's no problem with setting
#  lkrg.pcfi_validate=2 on Linux+LKRG guest systems in VirtualBox VMs.
#
#  Default: "2"
#lkrg.pcfi_validate = 2

#  How to act on pCFI violations.  Allowed values are 0 (log only), 1 (kill the
#  task), and 2 (panic the kernel).
#
#  Note that lkrg.pcfi_enforce=0 may produce repeated log messages for the same
#  violation, which might occasionally be noisy.
#
#  Default: "1"
#lkrg.pcfi_enforce = 1

#  Whether and to what extent to validate uses of usermodehelper (UMH).  Allowed
#  values are 0 (validation disabled), 1 (allow only previously known programs),
#  and 2 (completely block UMH).
#
#  UMH can also be protected with pCFI regardless of this setting.
#
#  UMH is a kernel-internal interface, which the kernel uses to invoke programs
#  such as /sbin/modprobe (to auto-load a module on demand) and many others.
#  When left unrestricted, UMH is convenient for kernel vulnerability exploits.
#
#  Default: "1"
#lkrg.umh_validate = 1

#  How to act on UMH usage violations.  Allowed values are 0 (log only), 1
#  (prevent execution), and 2 (panic the kernel).
#
#  Default: "1"
#lkrg.umh_enforce = 1

#  Whether or not to validate the Supervisor Mode Execution Protection (SMEP)
#  bit on supporting x86-64 CPUs.  Allowed values are 0 (no) and 1 (yes).
#
#  Default: "1"
#lkrg.smep_validate = 1

#  How to act on unexpected changes of the SMEP bit.  Allowed values are 0 (log
#  once and accept new likely-compromised state as valid), 1 (log the violation
#  and restore original value), and 2 (panic the kernel).
#
#  Default: "2"
#lkrg.smep_enforce = 2

#  Whether or not to validate the Supervisor Mode Access Prevention (SMAP) bit
#  on supporting x86-64 CPUs.  Allowed values are 0 (no) and 1 (yes).
#
#  Default: "0"
#lkrg.smap_validate = 0

#  How to act on unexpected changes of the SMAP bit.  Allowed values are 0 (log
#  once and accept new likely-compromised state as valid), 1 (log the violation
#  and restore original value), and 2 (panic the kernel).
#
#  Default: "0"
#lkrg.smap_enforce = 0

#  Whether or not to validate CPU Model Specific Registers (MSRs) as part of the
#  global integrity checking routine.  Allowed values are 0 (no) and 1 (yes).
#
#  Default: "0"
#lkrg.msr_validate = 0
